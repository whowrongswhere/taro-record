import Nerv from 'nervjs';
import Taro, { Component } from '@tarojs/taro-h5';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return _get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

/**
 * Filename: /src/lib/utils.js
 * Created Date: 2018-05-27 03:48:58
 * Author: Littly
 * Copyright (c) 2018 JD.COM
 */

/**
 * 将hash路径转换为全路径
 *
 * @param {string} url hash路径
 * @returns {string} 带hash的全路径
 */
var convertToFullUrl = function convertToFullUrl(url) {
  var hashIndex = window.location.href.indexOf('#');
  return window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + url;
};
/**
 * 将location.hash更换为新的hash
 *
 * @param {string} url 待跳转的hash路径
 */


var pushHash = function pushHash(url) {
  window.location.hash = url;
};
/**
 * 将当前的hash路径替换为新的
 *
 * @param {string} param0
 * @param {string} param0.url
 * @param {string} param0.state
 */


var replaceHash = function replaceHash(_ref) {
  var url = _ref.url,
      state = _ref.state;
  window.history.replaceState(state, '', convertToFullUrl(url));
};
/**
 * 获取当前hash路径
 *
 * @returns {string} hash路径
 */


var getCurrentHash = function getCurrentHash() {
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};
/**
 * 标准化路径（绝对路径，不带问号）
 *
 * @param {string} url 待转换的路径
 */


var normalizeUrl = function normalizeUrl(url) {
  url = url.replace(/\?$/, '');
  return url.charAt(0) === '/' ? url : "/".concat(url);
};

var counter = 0;
/**
 * @typedef {object} location
 * @property {string} routerIdx 页面对应的routerIdx
 * @property {string} fullUrl 路径
 * @property {string} pageId  location的唯一标识
 * @property {string} params query中的参数
 * @property {string} url 路径的主体部分
 */

/**
 * 生成location对象
 *
 * @param {string} fullUrl 待处理的路径
 * @param {number} state 页面对应的state
 * @return {location} location对象
 */

var createLocation = function createLocation(fullUrl, state) {
  fullUrl = decodeURIComponent(fullUrl);
  var url = fullUrl.split('?')[0];
  var params = {};
  var queryIndex = fullUrl.indexOf('?');

  if (queryIndex !== -1) {
    var queryString = fullUrl.substring(queryIndex + 1);
    queryString.split('&').forEach(function (pair) {
      var temp = pair.split('=');
      params[temp[0]] = temp[1];
    });
  }

  return {
    state: state,
    fullUrl: fullUrl,
    pageId: counter++,
    params: params,
    url: url
  };
};

function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
} // About 1.5x faster than the two-arg version of Array#splice()


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
} // This implementation is based heavily on node's url.parse


function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';
  var hasTrailingSlash = void 0;

  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;

  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }
  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
  var result = fromParts.join('/');
  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
  return result;
}

var navigateTo = function navigateTo() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var current = h.now();
  var currentUrl = current.url;
  var url = resolvePathname(opts.url, currentUrl);
  h.push({
    url: url
  });
  return Promise.resolve();
};

var navigateBack = function navigateBack() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var delta = opts.delta;

  if (typeof delta !== 'number') {
    delta = 1;
  }

  window.history.go(-1 * delta);
};

var redirectTo = function redirectTo() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // const success = opts.success
  // const fail = opts.fail
  // const complete = opts.complete
  h.replace({
    url: opts.url
    /* TODO: success fail complete*/

  });
  return Promise.resolve();
};

var listeners = [];
var createTransitionManager = (function () {
  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(void 0, arguments);
    };

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  };

  return {
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
});

var history = window.history;
var transitionManager = createTransitionManager();
var historyState = parseInt(history.state, 10) || 0;
var initUrl = normalizeUrl(getCurrentHash());
var initLocation = createLocation(initUrl, historyState);
var ignoredUrl = null;
var HISTORYKEY = 'taroRouterHistory';

var generateSerializer = function generateSerializer(obj) {
  return function () {
    localStorage.setItem(HISTORYKEY, JSON.stringify(obj));
  };
};

var History =
/*#__PURE__*/
function () {
  function History() {
    var _this = this;

    _classCallCheck(this, History);

    this.onHashchange = function (e) {
      history.replaceState(historyState, '', '');
    };

    this.onPopstate = function (e) {
      var nextUrl = normalizeUrl(getCurrentHash());

      if (typeof e.state !== 'number') {
        if (nextUrl === ignoredUrl) return;
        ignoredUrl = null;
        navigateTo({
          url: nextUrl
        });
        return;
      }

      var isBackPage = e.state < historyState;

      if (isBackPage) {
        _this.goBack({
          url: nextUrl,
          state: e.state
        });
      } else {
        navigateTo({
          url: nextUrl,
          state: e.state,
          isForward: true
        });
      }
    };

    this.listen = function (fn) {
      _this.unlisten = transitionManager.appendListener(fn);
    };
    /**
     * 在history.stack中push新的location
     *
     * @param {object} param0 push的对象
     */


    this.push = function (_ref) {
      var url = _ref.url,
          _ref$isForward = _ref.isForward,
          isForward = _ref$isForward === void 0 ? false : _ref$isForward,
          state = _ref.state;
      var nextUrl = normalizeUrl(url);

      var currentUrl = _this.now().url;

      if (!isForward && nextUrl === currentUrl) return;
      /**
       * 带state 是forward 否则是navigate
       */

      if (state) {
        historyState = state;
      } else {
        historyState += 1;
      }

      var location = createLocation(nextUrl, historyState);

      _this.locationStack.push(location);

      _this.serializeStack();

      transitionManager.notifyListeners(location, 'PUSH', {});
      ignoredUrl = nextUrl;

      if (!isForward) {
        pushHash(nextUrl);
      }
    };
    /**
     * 在history.stack中replace新的location
     *
     * @param {object} param0 replace的对象
     */


    this.replace = function (_ref2) {
      var url = _ref2.url;
      var nextUrl = normalizeUrl(url);

      var currentUrl = _this.now().url;

      if (nextUrl === currentUrl) return;
      var location = createLocation(nextUrl, historyState);

      _this.locationStack.pop();

      _this.locationStack.push(location);

      _this.serializeStack();

      transitionManager.notifyListeners(location, 'REPLACE', {});
      ignoredUrl = nextUrl;
      replaceHash({
        url: nextUrl,
        state: historyState
      });
      history.replaceState;
    };
    /**
     * 从history.stack中回退
     *
     * @param {object} param0 回退的配置项
     */


    this.goBack = function (_ref3) {
      var url = _ref3.url,
          state = _ref3.state;

      var len = _this.len();

      var foundStateIdx = _this.locationStack.findIndex(function (v) {
        return v.state === state;
      });

      var delta = foundStateIdx > -1 ? _this.locationStack.length - foundStateIdx - 1 : 1;

      if (len > delta) {
        _this.locationStack.splice(-delta);

        _this.serializeStack();

        var location = _this.now();

        historyState = location.state;
        transitionManager.notifyListeners(location, 'BACK', {
          delta: delta
        });
      } else if (delta <= 1 && url) {
        var _location = createLocation(normalizeUrl(url), state);

        historyState = state;
        _this.locationStack.length = 1;
        _this.locationStack[0] = _location;

        _this.serializeStack();

        transitionManager.notifyListeners(_location, 'BACK', {
          delta: delta
        });
      } else {
        return console.warn('goBack delta out of range');
      }
    };

    history.replaceState(historyState, '', null);
    window.addEventListener('hashchange', this.onHashchange);
    window.addEventListener('popstate', this.onPopstate);
    var stack = this.deserialize();

    if (this.validateStack(stack)) {
      this.locationStack = stack;
      this.serializeStack = generateSerializer(this.locationStack);
    } else {
      console.warn('Stack in storage invalid');
      this.locationStack = [initLocation];
      this.serializeStack = generateSerializer(this.locationStack);
      this.serializeStack();
    }
  }

  _createClass(History, [{
    key: "validateStack",
    value: function validateStack(stack) {
      if (stack.length === 0) return false;
      var historyMap = {};
      var hasDuplicateState = stack.some(function (v) {
        var state = v.state;
        if (historyMap[state]) return true;
        historyMap[state] = true;
      });
      if (hasDuplicateState) return false;
      var stackCurrent = stack[stack.length - 1];
      var isThisone = stackCurrent.state === initLocation.state && stackCurrent.fullUrl === initLocation.fullUrl;
      if (isThisone) return true;else return false;
    }
  }, {
    key: "deserialize",
    value: function deserialize() {
      try {
        var stackStr = localStorage.getItem(HISTORYKEY) || '[]';
        var stack = JSON.parse(stackStr);
        if (!Array.isArray(stack)) return [];
        return stack;
      } catch (e) {
        return [];
      }
    }
    /**
     * 返回当前的location
     *
     * @returns {location} location对象
     */

  }, {
    key: "now",
    value: function now() {
      var current = this.locationStack.length - 1;
      return this.locationStack[current];
    }
    /**
     * 返回当前的history栈长度
     *
     * @returns {number} history.stack的长度
     */

  }, {
    key: "len",
    value: function len() {
      return this.locationStack.length;
    }
  }]);

  return History;
}();

var h = new History();

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".taro_router {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.taro_page {\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background: #fff;\r\n  display: block;\r\n}\r\n\r\n.taro_page_show {\r\n  display: block;\r\n}\r\n\r\n.taro_page_hide {\r\n  display: none;\r\n}\r\n";
styleInject(css);

var PAGESTATUS = {
  HIDDEN: 1,
  SHOWING: 2
};

var getWrappedComponent = function getWrappedComponent(component) {
  var Wrapped =
  /*#__PURE__*/
  function (_component) {
    _inherits(Wrapped, _component);

    function Wrapped(props, context) {
      var _this;

      _classCallCheck(this, Wrapped);

      _this = _possibleConstructorReturn(this, (Wrapped.__proto__ || Object.getPrototypeOf(Wrapped)).call(this, props, context));
      _this.__pageStatus = PAGESTATUS.SHOWING;
      _this.locationState = props._$router.state;
      _this.$router = props._$router;
      return _this;
    }

    _createClass(Wrapped, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var nextLocation = nextProps._$router;
        var lastShouldShow = this.props._$router.state === this.locationState;
        var nextShouldShow = nextLocation.state === this.locationState;
        var canReceiveProps = lastShouldShow || nextShouldShow;
        this.$router = nextLocation;

        if (canReceiveProps && _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentWillReceiveProps", this)) {
          _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentWillReceiveProps", this).call(this, nextProps);
        }

        if (lastShouldShow === nextShouldShow) return;

        if (nextShouldShow) {
          this.__pageStatus = PAGESTATUS.SHOWING;
          this.forceUpdate();
          this.componentDidShow && this.componentDidShow();
        } else {
          this.__pageStatus = PAGESTATUS.HIDDEN;
          this.forceUpdate();
          this.componentDidHide && this.componentDidHide();
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidMount", this) && _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidMount", this).call(this);
        this.defaultShow = true;
        _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidShow", this) && _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidShow", this).call(this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidHide", this) && _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentDidHide", this).call(this);
        _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentWillUnmount", this) && _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "componentWillUnmount", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var containerStyle = this.__pageStatus === PAGESTATUS.SHOWING ? {
          display: 'block'
        } : {
          display: 'none'
        };
        return Nerv.createElement("div", {
          className: 'taro_page',
          dataState: this.locationState,
          style: containerStyle
        }, _get(Wrapped.prototype.__proto__ || Object.getPrototypeOf(Wrapped.prototype), "render", this).call(this));
      }
    }]);

    return Wrapped;
  }(component);

  return Wrapped;
};
/* 页面栈 */


var pageStack = [];
var pageInstStack = [];

var Router =
/*#__PURE__*/
function (_Component) {
  _inherits(Router, _Component);

  function Router() {
    var _this2;

    _classCallCheck(this, Router);

    _this2 = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).apply(this, arguments));

    _this2.hasPage = function (pathname) {
      var isNormalPage = _this2.props.routes.some(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            routePathname = _ref2[0];

        return pathname === routePathname;
      });

      var isIndex = /^\/(index(\.html)?)?[^/]*$/.test(pathname);
      if (isNormalPage || isIndex) return true;
      return false;
    };

    _this2.getPage = function (pathname) {
      var res = _this2.props.routes.find(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
            routePathname = _ref4[0];

        if (pathname === routePathname) return true;else return false;
      });

      return res ? res[1] : _this2.props.routes[0][1];
    };
    /**
     * 根据提供的location跳转
     *
     * @param {location} location 待跳转的location
     * @param {string} action 跳转的种类
     * @param {any} payload 附加参数
     */


    _this2.navigate = function (location, action) {
      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var fail = payload.fail,
          complete = payload.complete,
          success = payload.success,
          delta = payload.delta;
      var pathname;

      if (action === 'BACK') {
        if (pageStack.length <= delta) pathname = location.url;else return _this2.commit('BACK', null, {
          delta: delta
        });
      } else if (action === 'PUSH' || action === 'REPLACE') {
        pathname = location.url;
      }
      /* loadPage */


      if (!_this2.hasPage(pathname)) {
        fail && fail();
        complete && complete();
        return console.warn('page not found');
      }

      var pageComp = _this2.getPage(pathname);

      if (pageComp) {
        var comp = getWrappedComponent(pageComp);

        _this2.commit(action, comp, payload);

        success && success();
      } else {
        complete && complete();
        fail && fail();
      }
    };

    return _this2;
  }

  _createClass(Router, [{
    key: "commit",
    value: function commit(action, el, payload) {
      var delta = payload.delta;

      switch (action) {
        case 'PUSH':
          pageStack.push(el);
          this.forceUpdate();
          break;

        case 'REPLACE':
          pageStack.pop();
          pageStack.push(el);
          this.forceUpdate();
          break;

        case 'BACK':
          if (el) {
            pageStack = [el];
          } else {
            pageStack.splice(-delta);
          }

          this.forceUpdate();
          break;

        default:
          console.warn('wrong action');
      }
    }
  }, {
    key: "getPages",
    value: function getPages() {
      var $router = h.now();
      pageInstStack = pageStack.map(function (Comp) {
        return Nerv.createElement(Comp, {
          _$router: $router
        });
      });
      return pageInstStack;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      h.listen(this.navigate);
      this.navigate(h.now(), 'PUSH');
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      h.unlisten(this.navigate);
    }
  }, {
    key: "render",
    value: function render() {
      return Nerv.createElement("div", {
        className: 'taro_router'
      }, this.getPages());
    }
  }]);

  return Router;
}(Component);

var getCurrentPages = function getCurrentPages() {
  return pageStack;
};

Taro.navigateTo = navigateTo;
Taro.navigateBack = navigateBack;
Taro.redirectTo = redirectTo;
Taro.getCurrentPages = getCurrentPages;
var index = {
  Router: Router
};

export default index;
export { Router };
